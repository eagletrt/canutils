diff --git a/cansniffer.c b/cansniffer.c
index 5aa5e7a..fe19025 100644
--- a/cansniffer.c
+++ b/cansniffer.c
@@ -68,6 +68,20 @@
 
 #include "terminal.h"
 
+#define primary_IMPLEMENTATION
+#define primary_IDS_IMPLEMENTATION
+#include "can/lib/primary/c/network.h"
+#include "can/lib/primary/c/ids.h"
+
+#define secondary_IMPLEMENTATION
+#define secondary_IDS_IMPLEMENTATION
+#include "can/lib/secondary/c/network.h"
+#include "can/lib/secondary/c/ids.h"
+
+#define _MAX(A, B) ((A) > (B) ? (A) : (B))
+#define ID_LENGTH _MAX(primary_MAX_MESSAGE_LENGTH, secondary_MAX_MESSAGE_LENGTH)
+#define DATA_LENGTH 64 * sizeof("_AA")
+
 #define SETFNAME "sniffset."
 #define SETFDFNAME "sniffset_fd."
 #define FNAME_MAX_LEN 40
@@ -703,12 +717,8 @@ int handle_timeo(long currcms)
 	static unsigned int frame_count;
 
 	if (clearscreen) {
-		if (print_eff)
-			printf("%s%sXX|ms%s-- ID --%sdata ...     < %s %c l=%ld h=%ld t=%ld slots=%d >",
-			       CLR_SCREEN, CSR_HOME, vdl, vdl, interface, name_sep, loop, hold, timeout, idx);
-		else
-			printf("%s%sXX|ms%sID %sdata ...     < %s %c l=%ld h=%ld t=%ld slots=%d >",
-			       CLR_SCREEN, CSR_HOME, ldl, ldl, interface, name_sep, loop, hold, timeout, idx);
+		printf("%s%sXX|ms%sID%*s%sdata ...     < %s %c l=%ld h=%ld t=%ld slots=%d >",
+						CLR_SCREEN, CSR_HOME, ldl, ID_LENGTH - 2, "", ldl, interface, name_sep, loop, hold, timeout, idx);
 
 		force_redraw = 1;
 		clearscreen = 0;
@@ -772,14 +782,29 @@ void print_snifline(int slot)
 	if (diffsec >= 100)
 		diffsec = 99, diffusec = 999999;
 
-	if (cid & CAN_EFF_FLAG)
-		printf("%02ld%03ld%s%08X%s", diffsec, diffusec/1000, vdl, cid & CAN_EFF_MASK, vdl);
-	else if (print_eff)
-		printf("%02ld%03ld%s---- %03X%s", diffsec, diffusec/1000, vdl, cid & CAN_SFF_MASK, vdl);
-	else
-		printf("%02ld%03ld%s%03X%s", diffsec, diffusec/1000, ldl, cid & CAN_SFF_MASK, ldl);
+	if (primary_is_message_id(cid & CAN_SFF_MASK)) {
+		char buf[primary_MAX_MESSAGE_LENGTH];
+		primary_message_name_from_id(cid & CAN_SFF_MASK, buf);
+		printf("%02ld%03ld%s%*s%s", diffsec, diffusec/1000, vdl, ID_LENGTH, buf, vdl);
+	} else if (secondary_is_message_id(cid & CAN_SFF_MASK)) {
+		char buf[secondary_MAX_MESSAGE_LENGTH];
+		secondary_message_name_from_id(cid & CAN_SFF_MASK, buf);
+		printf("%02ld%03ld%s%*s%s", diffsec, diffusec/1000, vdl, ID_LENGTH, buf, vdl);
+	} else {
+		printf("%02ld%03ld%s%*X%s", diffsec, diffusec/1000, vdl, ID_LENGTH, cid & CAN_EFF_MASK, vdl);
+	}
 
-	if (binary) {
+	if (primary_is_message_id(cid& CAN_SFF_MASK)) {
+		void *message;
+		primary_deserialize_from_id(cid& CAN_SFF_MASK, sniftab[slot].current.data, &message);
+		primary_to_string_file_from_id(cid& CAN_SFF_MASK, message, stdout);
+		free(message);
+	} else if (secondary_is_message_id(cid& CAN_SFF_MASK)) {
+		void *message;
+		secondary_deserialize_from_id(cid& CAN_SFF_MASK, sniftab[slot].current.data, &message);
+		secondary_to_string_file_from_id(cid& CAN_SFF_MASK, message, stdout);
+		free(message);
+	} else if (binary) {
 		for (i = 0; i < sniftab[slot].current.len; i++) {
 			for (j=7; j >= 0; j--) {
 				if ((color) && (sniftab[slot].marker.data[i] & 1<<j) &&
