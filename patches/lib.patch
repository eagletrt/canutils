diff --git a/lib.c b/lib.c
index 935270b..5b63d93 100644
--- a/lib.c
+++ b/lib.c
@@ -50,6 +50,16 @@
 #include <linux/can/error.h>
 #include <sys/socket.h> /* for sa_family_t */
 
+#define primary_IMPLEMENTATION
+#define primary_IDS_IMPLEMENTATION
+#include "can/lib/primary/c/network.h"
+#include "can/lib/primary/c/ids.h"
+
+#define secondary_IMPLEMENTATION
+#define secondary_IDS_IMPLEMENTATION
+#include "can/lib/secondary/c/network.h"
+#include "can/lib/secondary/c/ids.h"
+
 #include "lib.h"
 
 #define CANID_DELIM '#'
@@ -361,24 +371,28 @@ void sprint_long_canframe(char *buf , struct canfd_frame *cf, int view, int maxd
 	int len = (cf->len > maxdlen)? maxdlen : cf->len;
 
 	/* initialize space for CAN-ID and length information */
-	memset(buf, ' ', 15);
+	memset(buf, ' ', CL_LONGCFSZ);
 
 	if (cf->can_id & CAN_ERR_FLAG) {
 		put_eff_id(buf, cf->can_id & (CAN_ERR_MASK|CAN_ERR_FLAG));
-		offset = 10;
 	} else if (cf->can_id & CAN_EFF_FLAG) {
 		put_eff_id(buf, cf->can_id & CAN_EFF_MASK);
-		offset = 10;
+	} else if (primary_is_message_id(cf->can_id & CAN_SFF_MASK)) {
+		char id_buffer[CL_ID];
+		primary_message_name_from_id(cf->can_id & CAN_SFF_MASK, id_buffer);
+		int len = sprintf(buf, "%*s", (int) CL_ID, id_buffer);
+		buf[len] = ' ';
+	} else if (secondary_is_message_id(cf->can_id & CAN_SFF_MASK)) {
+		char id_buffer[CL_ID];
+		secondary_message_name_from_id(cf->can_id & CAN_SFF_MASK, buf);
+		int len = sprintf(buf, "%*s", (int) CL_ID, id_buffer);
+		buf[len] = ' ';
 	} else {
-		if (view & CANLIB_VIEW_INDENT_SFF) {
-			put_sff_id(buf + 5, cf->can_id & CAN_SFF_MASK);
-			offset = 10;
-		} else {
-			put_sff_id(buf, cf->can_id & CAN_SFF_MASK);
-			offset = 5;
-		}
+		put_sff_id(buf, cf->can_id & CAN_SFF_MASK);
 	}
 
+	offset = CL_ID;
+
 	/* The len value is sanitized by maxdlen (see above) */
 	if (maxdlen == CAN_MAX_DLEN) {
 		if (view & CANLIB_VIEW_LEN8_DLC) {
@@ -412,7 +426,21 @@ void sprint_long_canframe(char *buf , struct canfd_frame *cf, int view, int maxd
 	}
 	offset += 5;
 
-	if (view & CANLIB_VIEW_BINARY) {
+	if (primary_is_message_id(cf->can_id & CAN_SFF_MASK)) {
+		dlen = 0;
+		void *message;
+		primary_deserialize_from_id(cf->can_id & CAN_SFF_MASK, cf->data, &message);
+		offset += 1;
+		offset += primary_to_string_from_id(cf->can_id & CAN_SFF_MASK, message, buf + offset);
+		free(message);
+	} else if (secondary_is_message_id(cf->can_id & CAN_SFF_MASK)) {
+		dlen = 0;
+		void *message;
+		secondary_deserialize_from_id(cf->can_id & CAN_SFF_MASK, cf->data, &message);
+		offset += 1;
+		offset += secondary_to_string_from_id(cf->can_id & CAN_SFF_MASK, message, buf + offset);
+		free(message);
+	} else if (view & CANLIB_VIEW_BINARY) {
 		dlen = 9; /* _10101010 */
 		if (view & CANLIB_VIEW_SWAP) {
 			for (i = len - 1; i >= 0; i--) {
diff --git a/lib.h b/lib.h
index 660f5e1..0892028 100644
--- a/lib.h
+++ b/lib.h
@@ -53,6 +53,13 @@
 #define CL_DATA sizeof(".AA")
 #define CL_BINDATA sizeof(".10101010")
 
+#include "can/lib/primary/c/ids.h"
+#include "can/lib/secondary/c/ids.h"
+
+#define _MAX(A, B) ((A) > (B) ? (A) : (B))
+#undef CL_ID
+#define CL_ID _MAX(_MAX(primary_MAX_MESSAGE_LENGTH, secondary_MAX_MESSAGE_LENGTH), (sizeof("12345678##1")))
+
  /* CAN FD ASCII hex short representation with DATA_SEPERATORs */
 #define CL_CFSZ (2*CL_ID + 64*CL_DATA)
